// Code generated by MockGen. DO NOT EDIT.
// Source: services/ioutil.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	os "os"
	reflect "reflect"
)

// MockIoUtil is a mock of IoUtil interface
type MockIoUtil struct {
	ctrl     *gomock.Controller
	recorder *MockIoUtilMockRecorder
}

// MockIoUtilMockRecorder is the mock recorder for MockIoUtil
type MockIoUtilMockRecorder struct {
	mock *MockIoUtil
}

// NewMockIoUtil creates a new mock instance
func NewMockIoUtil(ctrl *gomock.Controller) *MockIoUtil {
	mock := &MockIoUtil{ctrl: ctrl}
	mock.recorder = &MockIoUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIoUtil) EXPECT() *MockIoUtilMockRecorder {
	return m.recorder
}

// ReadAll mocks base method
func (m *MockIoUtil) ReadAll(r io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", r)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll
func (mr *MockIoUtilMockRecorder) ReadAll(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockIoUtil)(nil).ReadAll), r)
}

// WriteFile mocks base method
func (m *MockIoUtil) WriteFile(filename string, data []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", filename, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockIoUtilMockRecorder) WriteFile(filename, data, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockIoUtil)(nil).WriteFile), filename, data, perm)
}
