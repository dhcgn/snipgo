// Code generated by MockGen. DO NOT EDIT.
// Source: services/json.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockJson is a mock of Json interface
type MockJson struct {
	ctrl     *gomock.Controller
	recorder *MockJsonMockRecorder
}

// MockJsonMockRecorder is the mock recorder for MockJson
type MockJsonMockRecorder struct {
	mock *MockJson
}

// NewMockJson creates a new mock instance
func NewMockJson(ctrl *gomock.Controller) *MockJson {
	mock := &MockJson{ctrl: ctrl}
	mock.recorder = &MockJsonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJson) EXPECT() *MockJsonMockRecorder {
	return m.recorder
}

// Unmarshal mocks base method
func (m *MockJson) Unmarshal(data []byte, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal
func (mr *MockJsonMockRecorder) Unmarshal(data, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockJson)(nil).Unmarshal), data, v)
}

// Marshal mocks base method
func (m *MockJson) Marshal(v interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal
func (mr *MockJsonMockRecorder) Marshal(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockJson)(nil).Marshal), v)
}
